# Project-wide Gradle settings.

# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
# Increased stack size to prevent StackOverflowError
org.gradle.jvmargs=-Xmx2048m -Xss4m -Dfile.encoding=UTF-8

# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects.
org.gradle.parallel=true

# Enable Gradle Daemon
org.gradle.daemon=true

# Enable configure on demand
org.gradle.configureondemand=true

# Enable caching
org.gradle.caching=true

# Kotlin code style for this project: "official" or "obsolete":
kotlin.code.style=official

# ===== IMPORTANT: JDK CONFIGURATION =====
# The build is failing because Kotlin requires a JDK (not JRE) to compile.
# You need to specify the path to a valid JDK installation on your system.

# STEP 1: Check if you have a JDK installed
# Run this command in PowerShell: where javac
# If it returns a path, you have a JDK installed.

# STEP 2: Find your JDK installation path
# Common locations:
# - C:\Program Files\Java\jdk1.8.0_xxx
# - C:\Program Files\Java\jdk-11
# - C:\Program Files\Java\jdk-17
# - C:\Program Files (x86)\Java\jdk1.8.0_xxx

# STEP 3: Uncomment and update the following line with your JDK path
# Use double backslashes in the path
# Example: org.gradle.java.home=C:\\Program Files\\Java\\jdk-17
org.gradle.java.home=C:\\Program Files\\Eclipse Adoptium\\jdk-17.0.16.8-hotspot

# Path to custom Java installation - use double backslashes for Windows paths
java.home=C:\\Program Files\\Eclipse Adoptium\\jdk-17.0.16.8-hotspot

# STEP 4: If you don't have a JDK installed, download and install one:
# - For Java 8: https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html
# - For Java 11 or 17: https://adoptium.net/
# After installation, return to STEP 2.